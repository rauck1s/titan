generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE
  CONTENT_SPECIALIST
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum CourseStatus {
  PUBLISHED
  DRAFT
}

enum ContentType {
  TEXT
  VIDEO
  PRESENTATION
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model User {
  id           String     @id @default(uuid()) @db.Uuid
  email        String     @unique
  passwordHash String
  firstName    String
  lastName     String
  role         UserRole
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  courses       Course[]
  testAttempts  TestAttempt[]
  notifications Notification[]
  logs          Log[]
}

model Course {
  id          String  @id @default(uuid()) @db.Uuid
  title       String
  description String?

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String @db.Uuid

  status    CourseStatus @default(DRAFT)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  materials CourseMaterial[]
  tests     Test[]
}

model CourseMaterial {
  id          String      @id @default(uuid()) @db.Uuid
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String      @db.Uuid
  title       String
  contentType ContentType
  content     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Test {
  id           String   @id @default(uuid()) @db.Uuid
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String   @db.Uuid
  title        String
  description  String?
  timeLimit    Int?
  attemptLimit Int      @default(3)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  questions TestQuestion[]
  attempts  TestAttempt[]
}

model TestQuestion {
  id           String       @id @default(uuid()) @db.Uuid
  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId       String       @db.Uuid
  questionText String
  questionType QuestionType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  answers TestAnswer[]
}

model TestAnswer {
  id         String       @id @default(uuid()) @db.Uuid
  question   TestQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String       @db.Uuid
  answerText String
  isCorrect  Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model TestAttempt {
  id            String    @id @default(uuid()) @db.Uuid
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @db.Uuid
  test          Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId        String    @db.Uuid
  startTime     DateTime
  endTime       DateTime?
  score         Int?
  isPassed      Boolean   @default(false)
  attemptNumber Int
}

model Notification {
  id        String    @id @default(uuid()) @db.Uuid
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.Uuid
  message   String
  isSent    Boolean   @default(false)
  createdAt DateTime  @default(now())
  sentAt    DateTime?
}

model Log {
  id          String   @id @default(uuid()) @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.Uuid
  action      String
  description String?
  createdAt   DateTime @default(now())
}
